# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Bing WallPaper action

on:
  # schedule:
  #   - cron:  '22 8 * * 3'
  # push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]
  workflow_dispatch:
  repository_dispatch:
    types: [ms-powre-automate-event]

permissions:
  contents: read

jobs:
  run-python-script:
    runs-on: ubuntu-latest

    steps:
    - name: checkout repo content
      uses: actions/checkout@v3

    - name: setup python 3.12.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.12.9'  # You can specify any available Python version here
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements-finance.txt ]; then pip install -r requirements-finance.txt; fi

    - name: run main file
      env:
        client_id : ${{secrets.CLIENT_ID}}
        site_id : ${{secrets.SITE_ID}}
        site_id_for_sp : ${{secrets.SITE_ID_FOR_SP}}
        client_secret : ${{secrets.CLIENT_SECRET}}
        tenant_id : ${{secrets.TENANT_ID}}
        scope_list : ${{secrets.CLIENT_ID}}
        wx_APPID : ${{secrets.WX_APPID}}
        wx_SECRET : ${{secrets.WX_SECRET}}
        template_id : ${{secrets.TEMPLATE_ID}}
        openid : ${{secrets.OPENID}}
        proxy_add : ${{secrets.PROXY_ADD}}
        finance_section_id : ${{secrets.FINANCE_SECTION_ID}}
        username : ${{secrets.USERNAME}}
        key_deeplx : ${{secrets.KEY_DEEPLX}}
      id: run_script
      run: |
        # Run your Python script and capture all output (stdout + stderr)
        OUTPUT=$(python -u 03.OneDrive-BingPic.py 2>&1)
        
        # Optional: Print to GitHub Actions log for debugging
        echo "=== Full Script Output ==="
        echo "$OUTPUT"
        echo "=========================="
    
        # Keep only the last 20 lines (adjust as needed)
        TRUNCATED=$(echo "$OUTPUT" | tail -n 20)
    
        # Escape the output as a valid JSON string using jq
        # Install jq if not present (usually preinstalled on ubuntu-latest)
        ESCAPED_LOG=$(echo "$TRUNCATED" | jq -Rs .)
    
        # Save to GITHUB_OUTPUT using heredoc syntax for multi-line support
        echo "LOG_OUTPUT<<EOF" >> "$GITHUB_OUTPUT"
        echo "$ESCAPED_LOG" >> "$GITHUB_OUTPUT"
        echo "EOF" >> "$GITHUB_OUTPUT"
      
    - name: Notify Power Automate (Success)
      if: success()
      run: |
        curl -X POST "https://default8bee2fb215ff45ad8a49aa967122d5.37.environment.api.powerplatform.com:443/powerautomate/automations/direct/workflows/2e6f70b11999410f9e56ada71117e2a6/triggers/manual/paths/invoke?api-version=1&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=W-ge-P0EP6j07Rdu9MXkHw2gJPEcrSzN1s70-G-ISjQ" \
        -H "Content-Type: application/json" \
        -d '{
            "event": "workflow_completed",
            "status": "success",
            "workflow": "${{ github.workflow }}",
            "run_id": "${{ github.run_id }}",
            "repo": "${{ github.repository }}",
            "results": "Last 20 lines of output:\n'"${{ steps.run_script.outputs.LOG_OUTPUT }}"'",
            "actionURL": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id}}",
            "completed_at": "'"$(date -u +"%Y-%m-%dT%H:%M:%SZ")"'"
          }'
